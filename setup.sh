#!/bin/bash

# ============================================
# SETUP.SH - Configura√ß√£o Robusta para Node.js
# ============================================

set -euo pipefail  # Habilita modo estrito: erros param execu√ß√£o, vari√°veis n√£o definidas causam erro

# Cores para mensagens
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar e instalar depend√™ncias do sistema
install_system_deps() {
    echo -e "${YELLOW}üõ†  Verificando depend√™ncias do sistema...${NC}"
    
    local pkgs=("curl" "wget" "git" "python3" "python3-pip" "ffmpeg")
    local missing=()
    
    for pkg in "${pkgs[@]}"; do
        if ! dpkg -l | grep -q " $pkg "; then
            missing+=("$pkg")
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${YELLOW}üì¶ Instalando pacotes: ${missing[*]}${NC}"
        apt-get update && apt-get install -y "${missing[@]}"
    fi
}

# Fun√ß√£o para configurar Node.js
setup_node() {
    echo -e "\n${YELLOW}üü¢ Configurando Node.js...${NC}"
    
    # Verifica vers√£o m√≠nima do Node
    local min_node_version=16
    local node_version
    node_version=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
    
    if ! command -v node &> /dev/null; then
        echo -e "${RED}‚ùå Node.js n√£o encontrado. Instale Node.js v${min_node_version}+ primeiro.${NC}"
        exit 1
    fi
    
    if [ "$node_version" -lt "$min_node_version" ]; then
        echo -e "${RED}‚ùå Vers√£o do Node.js ($(node -v)) √© inferior √† v${min_node_version}.${NC}"
        exit 1
    fi
    
    # Corrige link simb√≥lico se necess√°rio
    if [ ! -f "/usr/bin/node" ] && [ -f "/usr/bin/nodejs" ]; then
        ln -sf /usr/bin/nodejs /usr/bin/node
    fi
    
    echo -e "${GREEN}‚úì Node.js $(node -v) configurado${NC}"
}

# Fun√ß√£o para instalar depend√™ncias do projeto
install_project_deps() {
    echo -e "\n${YELLOW}üì¶ Instalando depend√™ncias do projeto...${NC}"
    
    # Depend√™ncias de produ√ß√£o
    local prod_deps=(
        "express"
        "mongoose"
        "cors"
        "dotenv"
        "bcryptjs"
        "jsonwebtoken"
        "validator"
        "axios"
        "googleapis"
        "ws"
    )
    
    # Depend√™ncias de desenvolvimento
    local dev_deps=(
        "nodemon"
        "eslint"
        "prettier"
    )
    
    echo "Instalando depend√™ncias principais..."
    if ! npm install --save "${prod_deps[@]}"; then
        echo -e "${RED}‚ùå Falha ao instalar depend√™ncias principais${NC}"
        exit 1
    fi
    
    echo "Instalando depend√™ncias de desenvolvimento..."
    if ! npm install --save-dev "${dev_deps[@]}"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Aviso: Falha ao instalar algumas depend√™ncias de desenvolvimento${NC}"
    fi
}

# Fun√ß√£o principal
main() {
    echo -e "\n${GREEN}üîß Iniciando configura√ß√£o do ambiente...${NC}"
    
    # Configura√ß√£o espec√≠fica para Render.com
    if [ -n "${RENDER:-}" ]; then
        echo -e "${YELLOW}üõ†  Ambiente Render.com detectado${NC}"
        install_system_deps
        
        # Instala yt-dlp se necess√°rio
        if ! command -v yt-dlp &> /dev/null; then
            pip3 install -U yt-dlp youtube-dl
        fi
    fi
    
    setup_node
    
    # Verifica npm
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm n√£o encontrado. Instale o npm antes de continuar.${NC}"
        exit 1
    fi
    
    install_project_deps
    
    # Configura√ß√£o de diret√≥rios
    mkdir -p downloads tmp
    touch logs.txt && chmod 644 logs.txt
    
    echo -e "\n${GREEN}‚úÖ Configura√ß√£o conclu√≠da com sucesso!${NC}"
    echo -e "Vers√µes instaladas:"
    echo -e "‚Ä¢ Node.js: $(node -v)"
    echo -e "‚Ä¢ npm: $(npm -v)"
    echo -e "\nPr√≥ximos passos:"
    echo -e "1. Crie um arquivo .env com suas configura√ß√µes"
    echo -e "2. Execute o servidor com: ${YELLOW}npm start${NC}"
}

# Executa a fun√ß√£o principal
main "$@"
